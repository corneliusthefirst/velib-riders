tags:
- name: users
  description: Users API
- name: auth
  description: Auth API

paths:
  # [GET] users
  /users:
    get:
      tags: [users]
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      tags: [users]
      summary: Add User
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema: {$ref: '#/definitions/users'}
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      tags: [users]
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      tags: [users]
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema: {$ref: '#/definitions/users'}
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      tags: [users]
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] auth/login
  /auth/login:
    post:
      tags: [auth]
      summary: Login
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema: {$ref: '#/definitions/auth'}
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  # [POST] auth/register
  /auth/register:
    post:
      tags: [auth]
      summary: Register
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema: {$ref: '#/definitions/auth'}
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] auth/logout
  /auth/logout:
    post:
      tags: [auth]
      summary: Logout
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

# Definitions
definitions:
  users:
    type: object
    required: [email, password]
    properties:
      email:
        type: string
        description: User Email
      password:
        type: string
        description: User Password
  auth:
    type: object
    required: [email, password]
    properties:
      email:
        type: string
        description: User Email
      password:
        type: string
        description: User Password

schemes: [https, http]
